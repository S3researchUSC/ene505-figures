dt2 = dt[PARAMETER_CODE == "00010"]
rm(dt)
head(dt2)
rm(fac)
head(plants)
plants_ids = levels(factor(plants[, NPDES_IDS]))
plants_ids
head(dt2)
dt3 = dt2[ EXTERNAL_PERMIT_NMBR %in% plants_ids ]
View(dt3)
dt4 = dt3[ LIMIT_VALUE_NMBR <= DMR_VALUE_NMBR ]
View(dt4)
dtex = dt2[ EXTERNAL_PERMIT_NMBR == 'AR0000841']
View(dt2)
dt2 = dt[PARAMETER_CODE %in% c("00010", "00011")]
params = fread('/Users/MEAS/Google Drive/data/epa/echo/REF_Parameter.csv')
View(params)
# dt = fread('/Users/MEAS/Downloads/NPDES_DMRS_FY2010.csv')
dt = fread('/Users/MEAS/Google Drive/data/epa/echo/NPDES_DMRS_FY2018.csv')
dt2 = dt[PARAMETER_CODE %in% c("00010", "00011", "61576", "61577")]
rm(dt)
fac = fread('/Users/MEAS/Google Drive/data/epa/echo/ECHO_EXPORTER.csv')
plants = fac[FAC_SIC_CODES == '4911']
plants_ids = levels(factor(plants[, NPDES_IDS]))
dt3 = dt2[ EXTERNAL_PERMIT_NMBR %in% plants_ids ]
dt4 = dt3[ LIMIT_VALUE_NMBR <= DMR_VALUE_NMBR ]
View(dt4)
dt3 = dt2[ EXTERNAL_PERMIT_NMBR %like% plants_ids ]
dt3 = dt2[ EXTERNAL_PERMIT_NMBR %in% plants_ids ]
dt4 = dt3[ LIMIT_VALUE_NMBR <= DMR_VALUE_NMBR ]
strsplit(plants_ids, "\\s+")
plants_ids = strsplit(plants_ids, "\\s+")
dt3 = dt2[ EXTERNAL_PERMIT_NMBR %in% plants_ids ]
dt4 = dt3[ LIMIT_VALUE_NMBR <= DMR_VALUE_NMBR ]
View(dt4)
plants = fac[NPDES_IDS == 'CT0030180']
plants = fac[FAC_SIC_CODES == '4911']
View(plants)
View(plants_ids)
plants_ids[[1]]
plants_ids[1]
rbindlist(plants_ids)
plants_ids = levels(factor(plants[, NPDES_IDS]))
View(plants)
View(plants)
plants_ids = strsplit(plants_ids, "\\s+")
View(plants_ids)
reduce(c,plants_ids)
library(tidyverse)
plants_ids %>% reduce(c) %>% unique
plants_ids = plants_ids %>% reduce(c) %>% unique
dt3 = dt2[ EXTERNAL_PERMIT_NMBR %in% plants_ids ]
dt4 = dt3[ LIMIT_VALUE_NMBR <= DMR_VALUE_NMBR ]
View(dt4)
dtex = dt2[ EXTERNAL_PERMIT_NMBR == 'CT0030180']
View(dtex)
dtex = dt4[ EXTERNAL_PERMIT_NMBR == 'CT0030180']
View(dtex)
explant = plants[NPDES_IDS %like% 'CT0030180']
View(explant)
explant[, DFR_URL]
data_dir = '/Users/MEAS/GitHub/lifecycle-coal/output'
data_fil = 'water-flow_production-to-generation_region-ba_2017.csv'
ba_fil = 'water-flow_generation-to-consumption_ba_2017.csv'
plot_dir = '/Users/MEAS/GitHub/lifecycle-coal/figures'
data_dir = '/Users/MEAS/GitHub/lifecycle-coal/output'
data_fil = 'water-flow_production-to-generation_region-ba_2017.csv'
ba_fil = 'water-flow_generation-to-consumption_ba_2017.csv'
plot_dir = '/Users/MEAS/GitHub/lifecycle-coal/figures'
library(ggplot2)
library(ggalluvial)
library(hrbrthemes)
library(yarrr)
library(ggrepel)
library(ggsci)
library(data.table)
library(extrafont)
# read in data
setwd(data_dir)
dt = fread(data_fil, header = TRUE)
dt = dt[! (grubert_region == 'Imported' | ba_code == 'HICC')]
links = dt[, .(coalcons_gj = sum(coalcons_gj),
mining_cons_m3 = sum(mining_cons_m3),
prep_cons_m3 = sum(prep_cons_m3),
prep_with_m3 = sum(prep_with_m3)),
by=list(grubert_region, ba_code, coal_type)]
links[, subject := c(1:nrow(links))]
links[, colorvar := grubert_region]
# melt flow
links = melt(links,
id.vars = c("coal_type", 'subject', 'coalcons_gj', 'mining_cons_m3', 'prep_cons_m3', 'prep_with_m3'),
measure.vars = c('grubert_region', 'ba_code'),
variable.name = "survey", value.name = "response")
links[, response_labels := response]
links[response == 'Appalachia/Eastern', response_labels := 'Appalachia/\n Eastern']
links[response == 'Northern Great Plains', response_labels := 'Northern Great \n Plains']
links[response == 'Rocky Mountain Region', response_labels := 'Rocky Mountain \n Region']
setwd(data_dir)
reg_cols = pal_nejm("default")(7)
reg_cols = setNames(reg_cols, c("Appalachia/Eastern", "Gulf Coast",
"Interior", "Northern Great Plains",
"Rocky Mountain Region", "Imported", "Unknown"))
bas = fread(ba_fil, header = TRUE)
bas = bas[, c('ba_from', 'ba_to', 'coalgen_mwh')]
colnames(bas) = c('from', 'to', 'value')
ba_names = unique(c(bas[from != to][, from], bas[from != to][, to]))
ba_names = sort(ba_names)
pal2 = rep(unname(piratepal(palette = "info2")),8)[1:75]
pal2 = setNames(pal2, ba_names)
pal2['LDWP'] = "#D86C4FFF"
pal2['GVL'] = "#5A5895FF"
pal = c(reg_cols, pal2)
energy = ggplot(links,
aes(x = survey, stratum = response, alluvium = subject,
y = coalcons_gj/1e9)) +
geom_stratum(alpha = 1, width = 1/3, aes(fill = response, colour = NA)) +
geom_flow(alpha = 0.7, aes(fill = response)) +
labs(x = NULL,
y = expression(10^{9}~Gigajoules),
title = 'Coal Energy Consumed for Electricity') +
scale_fill_manual(values = pal) +
scale_x_discrete(labels = c('Mining Region', 'Balancing Authority'), expand = c(0.6,0)) +
scale_y_comma(expand = c(0,0)) +
geom_text_repel(aes(label = ifelse(survey == 'grubert_region',
as.character(response_labels), NA),
family = "Secca Soft",
color = response),
stat = "stratum", size = 5.6, direction = "y", nudge_x = -0.5) +
geom_text_repel(aes(label = ifelse(survey == 'ba_code',
as.character(response_labels), NA),
family = "Secca Soft",
color = response),
stat = "stratum", size = 4, direction = "y", nudge_x = 0.3) +
scale_color_manual(values = pal) +
theme_ipsum(grid = '', base_family = 'Secca Soft', axis_title_just = "center", plot_title_size = 26,
axis_title_size = 24, axis_text_size = 22, strip_text_size = 20) +
theme(legend.position = "none",
axis.line.x = element_blank(),
axis.ticks.x = element_blank(),
axis.line.y = element_line(color = "#9e9e9e"),
plot.margin = margin(0.4, 0.4, 0.4, 0.4, "cm"))
energy
minewc = ggplot(links,
aes(x = survey, stratum = response, alluvium = subject,
y = mining_cons_m3/1e6)) +
geom_stratum(alpha = 1, width = 1/3, aes(fill = response, colour = NA)) +
geom_flow(alpha = 0.7, aes(fill = response)) +
labs(x = NULL,
y = expression(10^{6}~Cubic Meters),
minewc = ggplot(links,
aes(x = survey, stratum = response, alluvium = subject,
y = mining_cons_m3/1e6)) +
geom_stratum(alpha = 1, width = 1/3, aes(fill = response, colour = NA)) +
geom_flow(alpha = 0.7, aes(fill = response)) +
labs(x = NULL,
y = expression(10^{6}~Cubic~Meters),
title = 'Water Consumed for Mining Coal') +
scale_fill_manual(values = pal) +
scale_x_discrete(labels = c('Mining Region', 'Balancing Authority'), expand = c(0.6,0)) +
scale_y_comma(expand = c(0,0)) +
geom_text_repel(aes(label = ifelse(survey == 'grubert_region',
as.character(response_labels), NA),
family = "Secca Soft",
color = response),
stat = "stratum", size = 5.6, direction = "y", nudge_x = -0.5) +
geom_text_repel(aes(label = ifelse(survey == 'ba_code',
as.character(response_labels), NA),
family = "Secca Soft",
color = response),
stat = "stratum", size = 4, direction = "y", nudge_x = 0.3) +
scale_color_manual(values = pal) +
theme_ipsum(grid = '', base_family = 'Secca Soft', axis_title_just = "center", plot_title_size = 26,
axis_title_size = 24, axis_text_size = 22, strip_text_size = 20) +
theme(legend.position = "none",
axis.line.x = element_blank(),
axis.ticks.x = element_blank(),
axis.line.y = element_line(color = "#9e9e9e"),
plot.margin = margin(0.4, 0.4, 0.4, 0.4, "cm"))
minewc
prepwc = ggplot(links,
aes(x = survey, stratum = response, alluvium = subject,
y = prep_cons_m3/1e6)) +
geom_stratum(alpha = 1, width = 1/3, aes(fill = response, colour = NA)) +
geom_flow(alpha = 0.7, aes(fill = response)) +
labs(x = NULL,
y = expression(10^{6}~Cubic~Meters),
title = 'Water Consumed for Preparing Coal') +
scale_fill_manual(values = pal) +
scale_x_discrete(labels = c('Mining Region', 'Balancing Authority'), expand = c(0.6,0)) +
scale_y_comma(expand = c(0,0)) +
geom_text_repel(aes(label = ifelse(survey == 'grubert_region',
as.character(response_labels), NA),
family = "Secca Soft",
color = response),
stat = "stratum", size = 5.6, direction = "y", nudge_x = -0.5) +
geom_text_repel(aes(label = ifelse(survey == 'ba_code',
as.character(response_labels), NA),
family = "Secca Soft",
color = response),
stat = "stratum", size = 4, direction = "y", nudge_x = 0.3) +
scale_color_manual(values = pal) +
theme_ipsum(grid = '', base_family = 'Secca Soft', axis_title_just = "center", plot_title_size = 26,
axis_title_size = 24, axis_text_size = 22, strip_text_size = 20) +
theme(legend.position = "none",
axis.line.x = element_blank(),
axis.ticks.x = element_blank(),
axis.line.y = element_line(color = "#9e9e9e"),
plot.margin = margin(0.4, 0.4, 0.4, 0.4, "cm"))
prepwc
prepww = ggplot(links,
aes(x = survey, stratum = response, alluvium = subject,
y = prep_with_m3/1e6)) +
geom_stratum(alpha = 1, width = 1/3, aes(fill = response, colour = NA)) +
geom_flow(alpha = 0.7, aes(fill = response)) +
labs(x = NULL,
y = expression(10^{6}~Cubic~Meters),
title = 'Water Withdrawn for Preparing Coal') +
scale_fill_manual(values = pal) +
scale_x_discrete(labels = c('Mining Region', 'Balancing Authority'), expand = c(0.6,0)) +
scale_y_comma(expand = c(0,0)) +
geom_text_repel(aes(label = ifelse(survey == 'grubert_region',
as.character(response_labels), NA),
family = "Secca Soft",
color = response),
stat = "stratum", size = 5.6, direction = "y", nudge_x = -0.5) +
geom_text_repel(aes(label = ifelse(survey == 'ba_code',
as.character(response_labels), NA),
family = "Secca Soft",
color = response),
stat = "stratum", size = 4, direction = "y", nudge_x = 0.3) +
scale_color_manual(values = pal) +
theme_ipsum(grid = '', base_family = 'Secca Soft', axis_title_just = "center", plot_title_size = 26,
axis_title_size = 24, axis_text_size = 22, strip_text_size = 20) +
theme(legend.position = "none",
axis.line.x = element_blank(),
axis.ticks.x = element_blank(),
axis.line.y = element_line(color = "#9e9e9e"),
plot.margin = margin(0.4, 0.4, 0.4, 0.4, "cm"))
prepww
# setwd(plot_dir)
ggsave(filename = paste0(plot_dir, '/', "alluv_mining-to-generating_energy.pdf"),
plot = energy,
width = 9,
height = 13.5,
dpi = 800)
embed_fonts(paste0(plot_dir, '/', "alluv_mining-to-generating_energy.pdf"),
outfile = paste0(plot_dir, '/', "alluv_mining-to-generating_energy.pdf"))
ggsave(filename = paste0(plot_dir, '/', "alluv_mining-to-generating_minewc.pdf"),
plot = minewc,
width = 9,
height = 13.5,
dpi = 800)
embed_fonts(paste0(plot_dir, '/', "alluv_mining-to-generating_minewc.pdf"),
outfile = paste0(plot_dir, '/', "alluv_mining-to-generating_minewc.pdf"))
ggsave(filename = paste0(plot_dir, '/', "alluv_mining-to-generating_prepwc.pdf"),
plot = prepwc,
width = 9,
height = 13.5,
dpi = 800)
embed_fonts(paste0(plot_dir, '/', "alluv_mining-to-generating_prepwc.pdf"),
outfile = paste0(plot_dir, '/', "alluv_mining-to-generating_prepwc.pdf"))
ggsave(filename = paste0(plot_dir, '/', "alluv_mining-to-generating_prepww.pdf"),
plot = prepww,
width = 9,
height = 13.5,
dpi = 800)
embed_fonts(paste0(plot_dir, '/', "alluv_mining-to-generating_prepww.pdf"),
outfile = paste0(plot_dir, '/', "alluv_mining-to-generating_prepww.pdf"))
# setwd(plot_dir)
ggsave(filename = paste0(plot_dir, '/', "alluv_mining-to-generating_energy.png"),
plot = energy,
width = 9,
height = 13.5,
dpi = 800)
ggsave(filename = paste0(plot_dir, '/', "alluv_mining-to-generating_minewc.png"),
plot = minewc,
width = 9,
height = 13.5,
dpi = 800)
ggsave(filename = paste0(plot_dir, '/', "alluv_mining-to-generating_prepwc.png"),
plot = prepwc,
width = 9,
height = 13.5,
dpi = 800)
ggsave(filename = paste0(plot_dir, '/', "alluv_mining-to-generating_prepww.png"),
plot = prepww,
width = 9,
height = 13.5,
dpi = 800)
# setwd(plot_dir)
ggsave(filename = paste0(plot_dir, '/', "alluv_mining-to-generating_energy.png"),
plot = energy,
width = 9,
height = 13.5,
dpi = 800)
ggsave(filename = paste0(plot_dir, '/', "alluv_mining-to-generating_minewc.png"),
plot = minewc,
width = 9,
height = 13.5,
dpi = 800)
ggsave(filename = paste0(plot_dir, '/', "alluv_mining-to-generating_prepwc.png"),
plot = prepwc,
width = 9,
height = 13.5,
dpi = 800)
ggsave(filename = paste0(plot_dir, '/', "alluv_mining-to-generating_prepww.png"),
plot = prepww,
width = 9,
height = 13.5,
dpi = 800)
# setwd(plot_dir)
ggsave(filename = paste0(plot_dir, '/', "alluv_mining-to-generating_energy.pdf"),
plot = energy,
width = 9,
height = 13.5,
dpi = 800)
embed_fonts(paste0(plot_dir, '/', "alluv_mining-to-generating_energy.pdf"),
outfile = paste0(plot_dir, '/', "alluv_mining-to-generating_energy.pdf"))
ggsave(filename = paste0(plot_dir, '/', "alluv_mining-to-generating_minewc.pdf"),
plot = minewc,
width = 9,
height = 13.5,
dpi = 800)
embed_fonts(paste0(plot_dir, '/', "alluv_mining-to-generating_minewc.pdf"),
outfile = paste0(plot_dir, '/', "alluv_mining-to-generating_minewc.pdf"))
ggsave(filename = paste0(plot_dir, '/', "alluv_mining-to-generating_prepwc.pdf"),
plot = prepwc,
width = 9,
height = 13.5,
dpi = 800)
embed_fonts(paste0(plot_dir, '/', "alluv_mining-to-generating_prepwc.pdf"),
outfile = paste0(plot_dir, '/', "alluv_mining-to-generating_prepwc.pdf"))
ggsave(filename = paste0(plot_dir, '/', "alluv_mining-to-generating_prepww.pdf"),
plot = prepww,
width = 9,
height = 13.5,
dpi = 800)
embed_fonts(paste0(plot_dir, '/', "alluv_mining-to-generating_prepww.pdf"),
outfile = paste0(plot_dir, '/', "alluv_mining-to-generating_prepww.pdf"))
library(data.table)
dt = fread('/Users/MEAS/Google Drive/data/epa/echo/compare-echo-eia_2011-2018.csv')
View(dt)
levels(factor(dt[, statistical_base_short_desc]))
momax = dt[ statistical_base_short_desc == 'MO MAX']
View(momax)
momax dt[ limit_unit_desc == "deg C", dmr_value_nmbr := dmr_value_nmbr*(9/5) + 32]
momax[ limit_unit_desc == "deg C", dmr_value_nmbr := dmr_value_nmbr*(9/5) + 32]
View(momax)
momax[ limit_unit_desc == "deg C", limit_unit_desc := "deg F"]
View(momax)
momax = dt[ statistical_base_short_desc == 'MO MAX']
View(momax)
momax = momax[ limit_unit_desc == "deg F" ]
View(momax)
library(ggplot2)
ggplot(momax, aes(x = discharge_max, y = dmr_value_nmbr)) + geom_point()
library(hrbrthemes)
ggplot(momax, aes(x = discharge_max, y = dmr_value_nmbr)) + geom_point() +
theme_ipsum_rc()
str(momax)
momax[, discharge_max := as.numeric(discharge_max)]
ggplot(momax, aes(x = discharge_max, y = dmr_value_nmbr)) + geom_point() +
theme_ipsum_rc()
View(dt)
daymax = dt[ statistical_base_short_desc == 'DAILY MX	']
View(daymax)
daymax = dt[ statistical_base_short_desc == 'DAILY MX']
View(daymax)
(113.00+90.1)/2
library(data.table)
library(ggplot2)
library(hrbrthemes)
dt = fread('/Users/MEAS/Google Drive/data/epa/echo/compare-echo-eia_2011-2018.csv')
momax = dt[ statistical_base_short_desc == 'MO MAX']
momax = momax[ limit_unit_desc == "deg F" ]
momax[, discharge_max := as.numeric(discharge_max)]
ggplot(momax, aes(x = discharge_max, y = dmr_value_nmbr)) + geom_point() +
theme_ipsum_rc()
daymax = dt[ statistical_base_short_desc == 'DAILY MX']
View(momax)
View(daymax)
# ---------------------------------------------------------------
# INPUT DATA ----------------------------------------------------
# ---------------------------------------------------------------
data.loc      = '/data_2017-2018' # location of data file(s)
exp.file      = 'Table_1.4b_Primary_Energy_Exports_by_Source_and_Total_Net_Imports.xlsx' # energy export data
imp.file      = 'Table_1.4a_Primary_Energy_Imports_by_Source.xlsx' # energy mport data
out.loc       = '/figures' # location of where to save figures
source.cols   = c("Biomass" = "#8c613c",
"Hydroelectric" = "#a6cee3",
"Nuclear" = "#55a868",
"Petroleum Products" = "#e59024",
"Crude Oil" = "#fdbf6f",
"Coal" = "#12253d",
"Coal Coke" = "#858585",
"Natural Gas" = "#c44e52",
"Total Primary Energy" = "#fc8d62",
"Total Petroleum" = "#383e56",
"Electricity" = "#ff9f9b",
"Total Energy Net Imports" = "#8da0cb")
# ---------------------------------------------------------------
# MAIN SCRIPT ---------------------------------------------------
# ---------------------------------------------------------------
# load libraries -------
library(data.table)
library(openxlsx)
library(ggplot2)
library(hrbrthemes)
library(stringr)
library(plyr)
library(directlabels)
library(grid)
library(rstudioapi)
library(extrafont)
loadfonts() # run this if you want to save images as pdf and have the fonts be accessible on all computers
current.fil = getActiveDocumentContext()$path
current.loc = dirname(current.fil)
setwd(dirname(current.fil))
setwd(paste0(current.loc, data.loc))
dt_exp = as.data.table(read.xlsx(exp.file, sheet = "Annual Data", startRow = 11, detectDates = T))
current.fil = getActiveDocumentContext()$path
current.loc = dirname(current.fil)
setwd(dirname(current.fil))
setwd(paste0(current.loc, data.loc))
dt_exp = as.data.table(read.xlsx(exp.file, sheet = "Annual Data", startRow = 11, detectDates = T))
dt_exp = dt_exp[2:nrow(dt_exp)]
dt_imp = as.data.table(read.xlsx(imp.file, sheet = "Annual Data", startRow = 11, detectDates = T))
dt_imp = dt_imp[2:nrow(dt_imp)]
colnames(dt_exp)[1] = c("Year")
colnames(dt_imp)[1] = c("Year")
dt_exp = melt(dt_exp, measure.vars = colnames(dt_exp)[2:11],
variable.name = "MSN", value.name = "Value")
dt_imp = melt(dt_imp, measure.vars = colnames(dt_imp)[2:10],
variable.name = "MSN", value.name = "Value")
dt_exp[, MSN := revalue(MSN, c('Biomass.Exports' = "Biomass Exports",
'Coal.Exports' = "Coal Exports",
'Coal.Coke.Exports' = "Coal Coke Exports",
'Natural.Gas.Exports' = "Natural Gas Exports",
'Crude.Oil.Exports' = "Crude Oil Exports",
"Petroleum.Products,.Excluding.Biofuels,.Exports" = "Petroleum Products Exports",
"Total.Petroleum,.Excluding.Biofuels,.Exports" = "Total Petroleum Exports",
'Electricity.Exports' = "Electricity Exports",
'Total.Energy.Exports' = "Total Primary Energy Exports",
'Total.Energy.Net.Imports' = 'Total Energy Net Imports Exports'))]
dt_imp[, MSN := revalue(MSN, c('Biomass.Imports' = "Biomass Imports",
'Coal.Imports' = "Coal Imports",
'Coal.Coke.Imports' = "Coal Coke Imports",
'Natural.Gas.Imports' = "Natural Gas Imports",
'Crude.Oil.Imports' = "Crude Oil Imports",
"Petroleum.Products,.Excluding.Biofuels,.Imports" = "Petroleum Products Imports",
"Total.Petroleum,.Excluding.Biofuels,.Imports" = "Total Petroleum Imports",
'Electricity.Imports' = "Electricity Imports",
'Total.Primary.Energy.Imports' = "Total Primary Energy Imports"))]
dt_exp[, source := gsub(" Exports", "", MSN)] # replace the " Exports" phrase with blank
dt_imp[, source := gsub(" Imports", "", MSN)] # replace the " Imports" phrase with blank
dt_exp[, Value := as.numeric(Value)]
dt_imp[, Value := as.numeric(Value)]
dt_exp = dt_exp[!is.na(Year)]
dt_imp = dt_imp[!is.na(Year)]
dt_imp[, Value := -Value]
dt_all = rbindlist(list(dt_exp, dt_imp))
setwd(paste0(current.loc, out.loc))
dt = dt_all[! source %in% c("Total Petroleum",
"Total Primary Energy",
"Total Energy Net Imports")][, source := factor(source,
levels = c("Biomass",
"Electricity",
"Natural Gas",
"Petroleum Products",
"Crude Oil",
"Coal Coke",
"Coal"))]
area_annual = ggplot(dt, aes(x = as.integer(Year), y = Value, group = MSN, fill = source)) +
geom_area() +
theme_ipsum_rc(grid = "Y")+
labs(title = "Annual U.S. Primary Energy Exports and Imports by Source (1949 - 2017)",
subtitle = "Data: U.S. Energy Information Administration",
x = NULL,
y = "Quadrillion BTU",
fill = "") +
theme_ipsum_rc(grid = "Y") +
annotate("text", x = 1965, y = 8, label = "Energy exports on positive axis",
size = 7, family = "Roboto Condensed") +
annotate("text", x = 1965, y = -25, label = "Energy imports on negative axis",
size = 7, family = "Roboto Condensed") +
scale_fill_manual(values = source.cols) +
scale_x_continuous(breaks = seq(1950,2017,5), expand = c(0,0)) +
scale_y_continuous(expand = c(0.01,0)) +
theme(plot.title = element_text(size = 21, hjust = 0.5, face = "bold"),
plot.subtitle = element_text(size = 15, hjust = 0.5),
axis.title.x = element_text(size = 17, hjust = 0.5, face = "bold"),
axis.title.y = element_text(size = 17, hjust = 0.5, face = "bold"),
axis.text.x = element_text(size = 15, face="bold"),
axis.text.y = element_text(size = 15, face="bold"),
legend.text = element_text(size = 13, face = "bold")) +
theme(plot.margin = unit(c(1,1,1,1), "lines"))
area_annual
# save as pdf
ggsave(filename = paste0("Energy_Primary Energy Exports and Imports by Source_Annual_1949-2017_ATS.pdf"),
plot = area_annual,
width = 11.75,
height = 6.25)
fonttable()
embed_fonts("Energy_Primary Energy Exports and Imports by Source_Annual_1949-2017_ATS.pdf",
outfile = "Energy_Primary Energy Exports and Imports by Source_Annual_1949-2017_ATS.pdf")
# save as pdf
ggsave(filename = paste0("Energy_Primary Energy Exports and Imports by Source_Annual_1949-2017_ATS.pdf"),
plot = area_annual,
width = 11.75,
height = 6.25)
install.packages('extrafont')
install.packages("extrafont")
