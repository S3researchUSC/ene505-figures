gg <- gg + geom_segment(data=df, aes(y=country, yend=country, x=0, xend=1), color="#b2b2b2", size=0.15)
# dum…dum…dum!bell
gg <- gg + geom_dumbbell(data=df, aes(y=country, x=ages_35, xend=ages_18_to_34),
size=1.5, color="#b2b2b2", point.size.l=3, point.size.r=3,
point.colour.l="#9fb059", point.colour.r="#edae52")
# text below points
gg <- gg + geom_text(data=filter(df, country=="Germany"),
aes(x=ages_35, y=country, label="Ages 35+"),
color="#9fb059", size=3, vjust=-2, fontface="bold", family="Calibri")
gg <- gg + geom_text(data=filter(df, country=="Germany"),
aes(x=ages_18_to_34, y=country, label="Ages 18-34"),
color="#edae52", size=3, vjust=-2, fontface="bold", family="Calibri")
# text above points
gg <- gg + geom_text(data=df, aes(x=ages_35, y=country, label=percent_first(ages_35)),
color="#9fb059", size=2.75, vjust=2.5, family="Calibri")
gg <- gg + geom_text(data=df, color="#edae52", size=2.75, vjust=2.5, family="Calibri",
aes(x=ages_18_to_34, y=country, label=percent_first(ages_18_to_34)))
# difference column
gg <- gg + geom_rect(data=df, aes(xmin=1.05, xmax=1.175, ymin=-Inf, ymax=Inf), fill="#efefe3")
gg <- gg + geom_text(data=df, aes(label=diff, y=country, x=1.1125), fontface="bold", size=3, family="Calibri")
gg <- gg + geom_text(data=filter(df, country=="Germany"), aes(x=1.1125, y=country, label="DIFF"),
color="#7a7d7e", size=3.1, vjust=-2, fontface="bold", family="Calibri")
gg <- gg + scale_x_continuous(expand=c(0,0), limits=c(0, 1.175))
gg <- gg + scale_y_discrete(expand=c(0.075,0))
gg <- gg + labs(x=NULL, y=NULL, title="The social media age gap",
subtitle="Adult internet users or reported smartphone owners who\nuse social networking sites",
caption="Source: Pew Research Center, Spring 2015 Global Attitudes Survey. Q74")
gg <- gg + theme_bw(base_family="Calibri")
gg <- gg + theme(panel.grid.major=element_blank())
gg <- gg + theme(panel.grid.minor=element_blank())
gg <- gg + theme(panel.border=element_blank())
gg <- gg + theme(axis.ticks=element_blank())
gg <- gg + theme(axis.text.x=element_blank())
gg <- gg + theme(plot.title=element_text(face="bold"))
gg <- gg + theme(plot.subtitle=element_text(face="italic", size=9, margin=margin(b=12)))
gg <- gg + theme(plot.caption=element_text(size=7, margin=margin(t=12), color="#7a7d7e"))
gg
# doing this vs y axis major grid line
gg <- gg + geom_segment(data=df, aes(y=country, yend=country, x=0, xend=1), color="#b2b2b2", size=0.15)
# dum…dum…dum!bell
gg <- gg + geom_dumbbell(data=df, aes(y=country, x=ages_35, xend=ages_18_to_34),
size=1.5, color="#b2b2b2", point.size.l=3, point.size.r=3,
point.colour.l="#9fb059", point.colour.r="#edae52")
# text below points
gg <- gg + geom_text(data=filter(df, country=="Germany"),
aes(x=ages_35, y=country, label="Ages 35+"),
color="#9fb059", size=3, vjust=-2, fontface="bold", family="Calibri")
gg <- gg + geom_text(data=filter(df, country=="Germany"),
aes(x=ages_18_to_34, y=country, label="Ages 18-34"),
color="#edae52", size=3, vjust=-2, fontface="bold", family="Calibri")
# text above points
gg <- gg + geom_text(data=df, aes(x=ages_35, y=country, label=percent_first(ages_35)),
color="#9fb059", size=2.75, vjust=2.5, family="Calibri")
gg
gg <- ggplot()
# doing this vs y axis major grid line
gg <- gg + geom_segment(data=df, aes(y=country, yend=country, x=0, xend=1), color="#b2b2b2", size=0.15)
# dum…dum…dum!bell
gg <- gg + geom_dumbbell(data=df, aes(y=country, x=ages_35, xend=ages_18_to_34),
size=1.5, color="#b2b2b2", point.size.l=3, point.size.r=3,
point.colour.l="#9fb059", point.colour.r="#edae52")
# text below points
gg <- gg + geom_text(data=filter(df, country=="Germany"),
aes(x=ages_35, y=country, label="Ages 35+"),
color="#9fb059", size=3, vjust=-2, fontface="bold", family="Calibri")
gg <- gg + geom_text(data=filter(df, country=="Germany"),
aes(x=ages_18_to_34, y=country, label="Ages 18-34"),
color="#edae52", size=3, vjust=-2, fontface="bold", family="Calibri")
gg
fonts()
gg <- ggplot()
# doing this vs y axis major grid line
gg <- gg + geom_segment(data=df, aes(y=country, yend=country, x=0, xend=1), color="#b2b2b2", size=0.15)
# dum…dum…dum!bell
gg <- gg + geom_dumbbell(data=df, aes(y=country, x=ages_35, xend=ages_18_to_34),
size=1.5, color="#b2b2b2", point.size.l=3, point.size.r=3,
point.colour.l="#9fb059", point.colour.r="#edae52")
# text below points
gg <- gg + geom_text(data=filter(df, country=="Germany"),
aes(x=ages_35, y=country, label="Ages 35+"),
color="#9fb059", size=3, vjust=-2, fontface="bold", family="Arial Narrow")
gg <- gg + geom_text(data=filter(df, country=="Germany"),
aes(x=ages_18_to_34, y=country, label="Ages 18-34"),
color="#edae52", size=3, vjust=-2, fontface="bold", family="Arial Narrow")
# text above points
gg <- gg + geom_text(data=df, aes(x=ages_35, y=country, label=percent_first(ages_35)),
color="#9fb059", size=2.75, vjust=2.5, family="Arial Narrow")
gg <- gg + geom_text(data=df, color="#edae52", size=2.75, vjust=2.5, family="Arial Narrow",
aes(x=ages_18_to_34, y=country, label=percent_first(ages_18_to_34)))
# difference column
gg <- gg + geom_rect(data=df, aes(xmin=1.05, xmax=1.175, ymin=-Inf, ymax=Inf), fill="#efefe3")
gg <- gg + geom_text(data=df, aes(label=diff, y=country, x=1.1125), fontface="bold", size=3, family="Arial Narrow")
gg <- gg + geom_text(data=filter(df, country=="Germany"), aes(x=1.1125, y=country, label="DIFF"),
color="#7a7d7e", size=3.1, vjust=-2, fontface="bold", family="Arial Narrow")
gg <- gg + scale_x_continuous(expand=c(0,0), limits=c(0, 1.175))
gg <- gg + scale_y_discrete(expand=c(0.075,0))
gg <- gg + labs(x=NULL, y=NULL, title="The social media age gap",
subtitle="Adult internet users or reported smartphone owners who\nuse social networking sites",
caption="Source: Pew Research Center, Spring 2015 Global Attitudes Survey. Q74")
gg <- gg + theme_bw(base_family="Arial Narrow")
gg <- gg + theme(panel.grid.major=element_blank())
gg <- gg + theme(panel.grid.minor=element_blank())
gg <- gg + theme(panel.border=element_blank())
gg <- gg + theme(axis.ticks=element_blank())
gg <- gg + theme(axis.text.x=element_blank())
gg <- gg + theme(plot.title=element_text(face="bold"))
gg <- gg + theme(plot.subtitle=element_text(face="italic", size=9, margin=margin(b=12)))
gg <- gg + theme(plot.caption=element_text(size=7, margin=margin(t=12), color="#7a7d7e"))
gg
View(df)
gg <- ggplot()
# doing this vs y axis major grid line
gg <- gg + geom_segment(data=df, aes(y=country, yend=country, x=0, xend=1), color="#b2b2b2", size=0.15)
gg
gg <- gg + geom_dumbbell(data=df, aes(y=country, x=ages_35, xend=ages_18_to_34),
size=1.5, color="#b2b2b2", point.size.l=3, point.size.r=3,
point.colour.l="#9fb059", point.colour.r="#edae52")
gg
# text below points
gg <- gg + geom_text(data=filter(df, country=="Germany"),
aes(x=ages_35, y=country, label="Ages 35+"),
color="#9fb059", size=3, vjust=-2, fontface="bold", family="Arial Narrow")
gg <- gg + geom_text(data=filter(df, country=="Germany"),
aes(x=ages_18_to_34, y=country, label="Ages 18-34"),
color="#edae52", size=3, vjust=-2, fontface="bold", family="Arial Narrow")
gg
# text above points
gg <- gg + geom_text(data=df, aes(x=ages_35, y=country, label=percent_first(ages_35)),
color="#9fb059", size=2.75, vjust=2.5, family="Arial Narrow")
gg <- gg + geom_text(data=df, color="#edae52", size=2.75, vjust=2.5, family="Arial Narrow",
aes(x=ages_18_to_34, y=country, label=percent_first(ages_18_to_34)))
gg
# difference column
gg <- gg + geom_rect(data=df, aes(xmin=1.05, xmax=1.175, ymin=-Inf, ymax=Inf), fill="#efefe3")
gg <- gg + geom_text(data=df, aes(label=diff, y=country, x=1.1125), fontface="bold", size=3, family="Arial Narrow")
gg <- gg + geom_text(data=filter(df, country=="Germany"), aes(x=1.1125, y=country, label="DIFF"),
color="#7a7d7e", size=3.1, vjust=-2, fontface="bold", family="Arial Narrow")
gg <- gg + scale_x_continuous(expand=c(0,0), limits=c(0, 1.175))
gg <- gg + scale_y_discrete(expand=c(0.075,0))
gg <- gg + labs(x=NULL, y=NULL, title="The social media age gap",
subtitle="Adult internet users or reported smartphone owners who\nuse social networking sites",
caption="Source: Pew Research Center, Spring 2015 Global Attitudes Survey. Q74")
gg <- gg + theme_bw(base_family="Arial Narrow")
gg <- gg + theme(panel.grid.major=element_blank())
gg <- gg + theme(panel.grid.minor=element_blank())
gg <- gg + theme(panel.border=element_blank())
gg <- gg + theme(axis.ticks=element_blank())
gg <- gg + theme(axis.text.x=element_blank())
gg <- gg + theme(plot.title=element_text(face="bold"))
gg <- gg + theme(plot.subtitle=element_text(face="italic", size=9, margin=margin(b=12)))
gg <- gg + theme(plot.caption=element_text(size=7, margin=margin(t=12), color="#7a7d7e"))
gg
myMap <- get_map(location=myLocation, source="stamen", maptype=“watercolor", crop=FALSE) ggmap(myMap)
library(ggmap)
library(ggplot2)
myMap <- get_map(location=myLocation, source="stamen", maptype=“watercolor", crop=FALSE) ggmap(myMap)
myMap <- get_map(location=myLocation, source="stamen", maptype=“watercolor", crop=FALSE)
myMap <- get_map(location=myLocation, source="stamen", maptype="watercolor", crop=FALSE)
myLocation <- "University of Washington”
myMap <- get_map(location=myLocation, source="stamen", maptype="watercolor", crop=FALSE)
myLocation <- "University of Washington"
myMap <- get_map(location=myLocation, source="stamen", maptype="watercolor", crop=FALSE)
ggmap(myMap)
devtools::install_github('slowkow/ggrepel')
devtools::install_github("slowkow/ggrepel")
ibrary(data.table)
library(plyr)
library(dplyr)
library(locfit)
library(grid)
library(gridExtra)
devtools::install_github("slowkow/ggrepel")
library(devtools)
devtools::install_github("slowkow/ggrepel")
library(devtools) install_github("hadley/ggplot2@v2.2.0")
library(devtools)
devtools::install_github("hadley/ggplot2@v2.2.0")
library(ggplot2)
myLocation <- "University of Washington"
myMap <- get_map(location=myLocation, source="stamen", maptype="watercolor", crop=FALSE)
ggmap(myMap)+
geom_point(aes(x = Longitude, y = Latitude), data = data,
alpha = .5, color="darkred", size = 3)
ggmap(myMap)
devtools::install_github('hadley/ggplot2')
devtools::install_github('thomasp85/ggforce')
devtools::install_github('thomasp85/ggraph')
install.packages("ggmap", type = "source")
install.packages("ggmap", type = "source")
library(ggmap)
library(devtools)
library(ggplot2)
myLocation <- "University of Washington"
myMap <- get_map(location=myLocation, source="stamen", maptype="watercolor", crop=FALSE)
ggmap(myMap)
source('~/.active-rstudio-document', echo=TRUE)
summaru(fm1)
summary(fm1)
library(devtools)
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
library(IRkernel)
IRkernel::installspec()
IRkernel::installspec()
IRkernel::installspec()
install.packages(jsonlite)
install.packages("jsonlite")
library(jsonlite)
rsinfo <- fromJSON(txt = http://saleiva.cartodb.com/api/v2/sql?q=select%20cdb_id,%20tour_length,%20shortname,%20year,%20description%20from%20rolling_stones_tours%20order%20by%20first_concert_date%20asc)
fromJSON(file=http://saleiva.cartodb.com/api/v2/sql?q=select%20cdb_id,%20tour_length,%20shortname,%20year,%20description%20from%20rolling_stones_tours%20order%20by%20first_concert_date%20asc)
url=http://saleiva.cartodb.com/api/v2/sql?q=select%20cdb_id,%20tour_length,%20shortname,%20year,%20description%20from%20rolling_stones_tours%20order%20by%20first_concert_date%20asc
rsinfo <- fromJSON(txt = 'http://saleiva.cartodb.com/api/v2/sql?q=select%20cdb_id,%20tour_length,%20shortname,%20year,%20description%20from%20rolling_stones_tours%20order%20by%20first_concert_date%20asc')
rbind(rsindo)
rbind(rsinfo)
library(data.table)
rbindlist(rsinfo)
as.data.table(rsinfo)
test[, rsinfo := gsub("'", "\"", rsinfo)]
test <- data.table(a = list(1,2,3),
info = list("{'duration': '10', 'country': 'US'}",
"{'duration': '20', 'country': 'US'}",
"{'duration': '30', 'country': 'GB', 'width': '20'}"))
View(test)
View(test)
rsinfo
test[, rbindlist(lapply(rsinfo, fromJSON), use.names = TRUE, fill = TRUE)]
R.Version()
library(installr)
input.dir   = '/Users/MEAS/Github/misc/kellyplots'
# ---------------------------------------- input files ----------------------------------------- #
dat.loc   = '/Users/MEAS/Google Drive/courses/ame577 - spring 2018/projects/project-1/data'
co2.dat   = 'EIA_Total Carbon Dioxide Emissions from the Consumption of Energy_1980-2015.csv'
temp.dat  = 'global_annual_mean_temp_anomalies_land-ocean_1880-2016.csv'
out.loc   = '/Users/MEAS/Google Drive/courses/ame577 - spring 2018/projects/project-1/extrapolation'
# load packages -----
library(data.table)
library(forecast)
library(ggplot2)
library(hrbrthemes)
?ets
?forecast
?ets
in.dir          = '/Users/MEAS/Google Drive/research/climate-efficiency/input-files'
dat.file        = 'all-cooling-types_operational-climate_2008-2017.rds'
gen.fil         = 'match_all_epa-eia_reporting_2008-2017.xlsx'
plot.dir        = '/Users/MEAS/Google Drive/research/climate-efficiency/plots/20180928'
library(data.table)
library(plyr)
library(lubridate)
library(openxlsx)
library(stringr)
library(ggplot2)
library(hrbrthemes)
library(nlme)
library(minpack.lm)
library(dbscan)
library(data.table)
library(plyr)
library(lubridate)
library(ggplot2)
theme_minimal() +
theme(
text = element_text(family = "Roboto Condensed", color = "#22211d"),
axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
# panel.grid.minor = element_line(color = "#ebebe5", size = 0.2),
panel.grid.major = element_line(color = "#ffffff", size = 0.2),
panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "#ffffff", color = NA),
panel.spacing = unit(0.1,"cm"),
panel.background = element_rect(fill = "#ffffff", color = NA),
legend.background = element_rect(fill = "#ffffff", color = NA),
panel.border = element_blank(),
...
)
theme_map <- function(...) {
theme_minimal() +
theme(
text = element_text(family = "Roboto Condensed", color = "#22211d"),
axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
# panel.grid.minor = element_line(color = "#ebebe5", size = 0.2),
panel.grid.major = element_line(color = "#ffffff", size = 0.2),
panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "#ffffff", color = NA),
panel.spacing = unit(0.1,"cm"),
panel.background = element_rect(fill = "#ffffff", color = NA),
legend.background = element_rect(fill = "#ffffff", color = NA),
panel.border = element_blank(),
...
)
}
states = map_data("state")
counties = map_data("county")
?map_data
install.packages("tigris")
library(data.table)
library(plyr)
library(lubridate)
library(ggplot2)
library(tigris)
census = tracts()
census = tracts("us")
?tracts
census = tracts("CA")
Sys.setenv(TZ = "America/Los_Angeles")
rm(census)
sts = c("DC", "MD", "VA")
combined = rbind_tigris(
lapply(sts, function(x) {
tracts(x, cb = TRUE)
})
)
plot(combined)
source('~/GitHub/lbj-scatter/scrape-data.R', echo=TRUE)
szns = 2004:2019
Sys.setenv(TZ = "America/Los_Angeles")
szns = 2004:2019
url = "https://www.basketball-reference.com/players/j/jamesle01/gamelog/"
list.gl = list()
for (i in 1:length(szns)) {
full.url = paste0(url,szns[i])
gl = full.url %>%
read_html() %>%
html_nodes(xpath='//*[@id="pgl_basic"]') %>%
html_table()
# gl.data = setDT(gl[[1]])
list.gl[[i]] = setDT(gl[[1]])
rm(full.url,gl)
}
View(dt.gl)
setwd('/Users/MEAS/Github/lbj-scatter')
fwrite(dt.gl, "lbj_gamelogs.csv", row.names = FALSE)
# create data table ------
dt.gl = rbindlist(list.gl)
# remove rows with "Date" as entry for date -----
dt.gl = dt.gl[ ! Date == "Date"]
# remove inactive rows -----
dt.gl = dt.gl[! MP %in% c("Inactive", "Did Not Play", "Did Not Dress", "Not With Team")]
# keep relevant columns ------
dt.gl = dt.gl[, c("G", "Date", "Tm", "Opp", "MP", "PTS", "Age")]
# convert points to numeric ----
dt.gl[, PTS := as.numeric(PTS)]
# convert dates to Date class ----
dt.gl[, Date := ymd(Date)]
dt.gl[, Date2 := format(Date, format="%d %B %Y")]
# get minutes column -----
dt.gl[, Minutes := minute(hms(paste0("00:",MP)))]
# get age column -----
dt.gl[, Age2 := as.numeric(sub("-", ".", Age))]
# create sequence ------
dt.gl = dt.gl[order(Date)]
dt.gl[, Game := 1:nrow(dt.gl)]
# export data -----
setwd('/Users/MEAS/Github/lbj-scatter')
fwrite(dt.gl, "lbj_gamelogs.csv", row.names = FALSE)
# assign team colors ------
tm.cols = c("CLE" = "#FFB81C",
"MIA" = "#98002E",
"LAL" = "#552583")
# plot ------
# p = ggplot(dt.gl, aes(x = Game, y = PTS, color = Tm, size = Minutes)) + geom_point(alpha = 0.5) +
#   theme_ipsum_rc(grid = "Y") +
#   scale_color_manual(values = tm.cols)
# p
View(dt.gl)
fwrite(dt.gl, "lbj_gamelogs2.csv", row.names = FALSE)
View(dt.gl)
# create data table ------
dt.gl = rbindlist(list.gl)
# remove rows with "Date" as entry for date -----
dt.gl = dt.gl[ ! Date == "Date"]
# remove inactive rows -----
dt.gl = dt.gl[! MP %in% c("Inactive", "Did Not Play", "Did Not Dress", "Not With Team")]
# keep relevant columns ------
dt.gl = dt.gl[, c("G", "Date", "Tm", "Opp", "MP", "PTS", "Age")]
# convert points to numeric ----
dt.gl[, PTS := as.numeric(PTS)]
# convert dates to Date class ----
dt.gl[, Date := ymd(Date)]
dt.gl[, Date2 := format(Date, format="%d %B %Y")]
# get minutes column -----
dt.gl[, Minutes := minute(hms(paste0("00:",MP)))]
# get age column -----
dt.gl[, Age2 := as.numeric(sub("-", ".", Age))]
# create sequence ------
dt.gl = dt.gl[order(Date)]
dt.gl[, Game := 1:nrow(dt.gl)]
# export data -----
setwd('/Users/MEAS/Github/lbj-scatter')
fwrite(dt.gl, "lbj_gamelogs.csv", row.names = FALSE)
# assign team colors ------
tm.cols = c("CLE" = "#FFB81C",
"MIA" = "#98002E",
"LAL" = "#552583")
View(dt.gl)
Sys.setenv(TZ = "America/Los_Angeles")
dt.gl[, Minutes := minute(hms(paste0("00:",MP)))]
dt.gl[, Minutes := minute(hms(paste0("00:",MP)), origin = lubridate::origin)]
dt.gl[, Minutes := minute(hms(paste0("00:",MP), origin = lubridate::origin))]
View(dt.gl)
?round_date
round_date(dt.gl[, MP], "hour")
View(dt.gl)
dt.gl[, Minutes := minute(hms(paste0(Date, " ",  "00:",MP)))]
View(dt.gl)
minute(00:40:41)
minute(hms(00:40:31))
minute(40:31)
minute(hm(40:31))
minute(hms(00:40:31), origin="1970-01-01")
hms(00:40:31)
hms(01:10:10)
hms("01:10:10")
minute(hms("01:10:10"))
minute(hms("01:10:10"), origin = "1970-01-01")
minute(hms("01:10:10", origin = "1970-01-01"))
dt.gl[, datetime := paste0(Date, " ", "00:", MP)]
View(dt.gl)
dt.gl[, datetime := ymd_hms(datetime)]
View(dt.gl)
dt.gl[, Minutes := minute(datetime)]
View(dt.gl)
# create data table ------
dt.gl = rbindlist(list.gl)
# remove rows with "Date" as entry for date -----
dt.gl = dt.gl[ ! Date == "Date"]
# remove inactive rows -----
dt.gl = dt.gl[! MP %in% c("Inactive", "Did Not Play", "Did Not Dress", "Not With Team")]
# keep relevant columns ------
dt.gl = dt.gl[, c("G", "Date", "Tm", "Opp", "MP", "PTS", "Age")]
# convert points to numeric ----
dt.gl[, PTS := as.numeric(PTS)]
# convert dates to Date class ----
dt.gl[, Date := ymd(Date)]
dt.gl[, Date2 := format(Date, format="%d %B %Y")]
# get minutes column -----
dt.gl[, datetime := paste0(Date, " ", "00:", MP)]
dt.gl[, datetime := ymd_hms(datetime)]
dt.gl[, Minutes := minute(datetime)]
# dt.gl[, Minutes := minute(hms(paste0(Date, " ",  "00:",MP)))]
# get age column -----
dt.gl[, Age2 := as.numeric(sub("-", ".", Age))]
# create sequence ------
dt.gl = dt.gl[order(Date)]
dt.gl[, Game := 1:nrow(dt.gl)]
# export data -----
setwd('/Users/MEAS/Github/lbj-scatter')
fwrite(dt.gl, "lbj_gamelogs.csv", row.names = FALSE)
View(dt.gl)
fwrite(dt.gl, "lbj_gamelogs3.csv", row.names = FALSE)
fwrite(dt.gl, "lbj_gamelogs.csv", row.names = FALSE)
source('~/GitHub/lbj-scatter/scrape-data.R', echo=TRUE)
source('~/GitHub/lbj-scatter/scrape-data.R', echo=TRUE)
# ---------------------------------------------------------------
# INPUT DATA ----------------------------------------------------
# ---------------------------------------------------------------
data.loc      = '/Users/MEAS/Google Drive/ta-materials/ENE505 - Fall 2015/ENE 505 Charts/data_2017-2018' # location of data file(s)
reg.fil       = 'International_Primary Energy by Region_1980-2015.csv'
cntry.fil     = 'International_Primary Energy by Country_1980-2015.csv'
gdp.fil       = 'International_Gross Domestic Product_1980-2015.csv'
out.loc       = '/Users/MEAS/Google Drive/ta-materials/ENE505 - Fall 2015/ENE 505 Charts/20180823' # location of where to save figures
reg.cols      = c("#4C72B0", "#DD8452", "#55A868", "#C44E52", "#8172B3", "#937860", "#DA8BC3", "#8C8C8C", "#CCB974", "#64B5CD")
cntry.cols    = c("#0173B2", "#DE8F05", "#029E73", "#D55E00", "#CC78BC", "#CA9161", "#FBAFE4", "#949494", "#ECE133", "#56B4E9")
# ---------------------------------------------------------------
# MAIN SCRIPT ---------------------------------------------------
# ---------------------------------------------------------------
# load libraries -------
library(data.table)
library(openxlsx)
library(ggplot2)
library(hrbrthemes)
library(stringr)
library(plyr)
library(directlabels)
library(grid)
# read in data -------
setwd(data.loc)
dt_reg = fread(reg.fil, header = FALSE, drop = c(1,3), col.names = c("Region",  c(1980:2015)))
View(dt_reg)
# ---------------------------------------------------------------
# INPUT DATA ----------------------------------------------------
# ---------------------------------------------------------------
data.loc      = '/Users/MEAS/Google Drive/ta-materials/ENE505 - Fall 2015/ENE 505 Charts/data_2017-2018' # location of data file(s)
cntry.fil     = 'International_Primary Energy by Country_1980-2015.csv'
# ---------------------------------------------------------------
# MAIN SCRIPT ---------------------------------------------------
# ---------------------------------------------------------------
# load libraries -------
library(data.table)
# read in data -------
setwd(data.loc)
dt_country = fread(cntry.fil, header = FALSE, drop = c(1,3), col.names = c("Region",  c(1980:2015)))
View(dt_country)
dt_country = melt(dt_country, measure.vars = colnames(dt_country)[2:37],
variable.name = "Year", value.name = "Value")
View(dt_country)
dt_country = fread(cntry.fil, header = FALSE, drop = c(1,3), col.names = c("country",  c(1980:2015)))
dt_country = melt(dt_country, measure.vars = colnames(dt_country)[2:37],
variable.name = "year", value.name = "value")
View(dt_country)
dt_country[, year := as.numeric(as.character(year))]
dt_country[, value := as.numeric(as.character(value))]
View(dt_country)
